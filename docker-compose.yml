version: '3.8'

services:
  certgen:
    image: alpine:latest
    volumes:
      - ./certs:/certs
    command: >
      /bin/sh -c "
        apk add --no-cache openssl &&
        mkdir -p /certs &&
        # Generate CA
        openssl genpkey -algorithm RSA -out /certs/ca.key &&
        openssl req -x509 -new -nodes -key /certs/ca.key -sha256 -days 1825 -out /certs/ca.crt -subj '/C=US/ST=State/L=City/O=Organization/CN=Local CA' &&
        
        # Generate frontend cert
        openssl genpkey -algorithm RSA -out /certs/frontend.key &&
        openssl req -new -key /certs/frontend.key -out /certs/frontend.csr -subj '/C=US/ST=State/L=City/O=Organization/CN=localhost' &&
        openssl x509 -req -in /certs/frontend.csr -CA /certs/ca.crt -CAkey /certs/ca.key -CAcreateserial -out /certs/frontend.crt -days 825 -sha256 &&
        
        # Generate backend cert
        openssl genpkey -algorithm RSA -out /certs/backend.key &&
        openssl req -new -key /certs/backend.key -out /certs/backend.csr -subj '/C=US/ST=State/L=City/O=Organization/CN=localhost' &&
        openssl x509 -req -in /certs/backend.csr -CA /certs/ca.crt -CAkey /certs/ca.key -CAcreateserial -out /certs/backend.crt -days 825 -sha256 &&
        
        # Generate keycloak cert
        openssl genpkey -algorithm RSA -out /certs/keycloak.key &&
        openssl req -new -key /certs/keycloak.key -out /certs/keycloak.csr -subj '/C=US/ST=State/L=City/O=Organization/CN=localhost' &&
        openssl x509 -req -in /certs/keycloak.csr -CA /certs/ca.crt -CAkey /certs/ca.key -CAcreateserial -out /certs/keycloak.crt -days 825 -sha256 &&
        
        # Set permissions
        chmod 644 /certs/*.crt /certs/*.key &&
        echo 'Certificates generated successfully'
      "

  frontend:
    build: ./frontend
    ports:
      - "3003:443"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - ./certs:/etc/certs:ro
    environment:
      - VITE_API_URL=https://localhost:8008
      - VITE_KEYCLOAK_URL=https://localhost:8013
      - VITE_KEYCLOAK_REALM=secure-files
      - VITE_KEYCLOAK_CLIENT_ID=secure-files-client
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      certgen:
        condition: service_completed_successfully
      backend:
        condition: service_started
      keycloak:
        condition: service_started

  backend:
    build: ./backend
    ports:
      - "8008:443"
    volumes:
      - ./backend:/app
      - file-storage:/app/storage
      - log-storage:/app/logs
      - ./certs:/etc/certs:ro
    environment:
      - DEBUG=1
      - SECRET_KEY=your-secret-key
      - DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 [::1] 0.0.0.0 *
      - CORS_ALLOWED_ORIGINS=https://localhost:3003
      - KEYCLOAK_URL=https://keycloak:8443
      - KEYCLOAK_REALM=secure-files
      - KEYCLOAK_CLIENT_ID=secure-files-client
      - KEYCLOAK_CLIENT_SECRET=w6AGqLWtXIBKV9g6Bo2IM0iDjuiK9D0N
      - KEYCLOAK_ADMIN_CLIENT_ID=admin-cli-secure-files
      - KEYCLOAK_ADMIN_CLIENT_SECRET=4hLERkBrsxFSFE0uyqb6vrrlXKyTH0OX
      - KEYCLOAK_VERIFY_SSL=true
    depends_on:
      certgen:
        condition: service_completed_successfully
      keycloak:
        condition: service_started

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    ports:
      - "8013:8443"
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://db:5432/postgres
      - KC_DB_USERNAME=postgres
      - KC_DB_PASSWORD=postgres
      - KC_HTTPS_CERTIFICATE_FILE=/etc/certs/keycloak.crt
      - KC_HTTPS_CERTIFICATE_KEY_FILE=/etc/certs/keycloak.key
      - KC_HOSTNAME=localhost
      - KC_PROXY=edge
    volumes:
      - ./keycloak/themes/secure-files:/opt/keycloak/themes/secure-files:ro
      - ./certs:/etc/certs:ro
    depends_on:
      certgen:
        condition: service_completed_successfully
      db:
        condition: service_started
    command:
      - start
      - --https-certificate-file=/etc/certs/keycloak.crt
      - --https-certificate-key-file=/etc/certs/keycloak.key

  db:
    image: postgres:13
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=secure_files
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres

volumes:
  postgres_data:
  file-storage:
  log-storage: